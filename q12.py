# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:
"""
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import math
def factors(n):
    """ Returns the list of n's factors
    --param
    n : int
    --return
    list
    """
    if n < 1:
        return []
    elif n in {1,2,3}:
        temp = set()
        temp.add(1)
        temp.add(n)
        return list(temp)
    else:
        temp = set()
        temp.add(1)
        temp.add(n)
        for i in range(2,math.floor(math.sqrt(n))+1):
            if n % i == 0:
                temp.add(i)
                temp.add(n//i)
        # end of for
        return list(temp)
# end of factors

def triangleNum(upperLimit):
    """ Determines the triangle number up to upperLimit
    --param
    upperLimit : int
    --return
    integer
    """
    return sum(range(1,upperLimit+1))
# end of triangleNum

factorsCount = 0
index = 0
answer = 0

while factorsCount <= 500:
    index += 1
    temp = len(factors(triangleNum(index)))
    if temp > factorsCount:
        factorsCount = temp
        answer = triangleNum(index)

print(index) # 12375th Triangle Number
print(answer) # 76576500

# Optimization Note:
# Save the factors found in a dictionary 01/22/2018
